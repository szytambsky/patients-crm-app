spring:
  application.name: patient-service
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari.maximum-pool-size: 12
  kafka.producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
  cache:
    type: ${SPRING_CACHE_TYPE}
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST}
      port: ${SPRING_DATA_REDIS_PORT}
# if 50% of last 10 calls have failed, open circuit keep open for 10s before test if grpc billingRequest succeeding again
resilience4j:
  circuitbreaker:
    instances:
      billingService:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
  retry:
    instances:
      billingRetry:
        maxAttempts: 2
        waitDuration: 500ms
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,cache
  endpoint:
    prometheus:
      access: unrestricted
  prometheus:
    metrics:
      export:
        enabled: true
server:
  port: 8080
grpc:
  server:
    port: 9090